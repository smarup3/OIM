package com.test.rest;

import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;

public class RestAdapter {

public static void main(String[] args) {
RestAdapter adp=new RestAdapter();
HashMap<String,String> itResMap=new HashMap<String,String>();
itResMap.put("username", "Put user name here");
itResMap.put("password", "Put password here");
adp.pushUserLoginInSAP("User Login","Employee Number",itResMap);

}

public String pushUserLoginInSAP(String userLogin, String employeeNumber,
HashMap<String,String> itResMap) {
String response = "FAILED";
HttpURLConnection rc = null;
String serviceURL = itResMap.get("WebService URL") + "/" + employeeNumber + "/"
+ userLogin;
int len = serviceURL.length();
URL url;
try {
byte[] message = (itResMap.get("username")+":"+itResMap.get("password")).getBytes("UTF-8");
String encoded = javax.xml.bind.DatatypeConverter.printBase64Binary(message);
url = new URL(serviceURL);
rc = (HttpURLConnection) url.openConnection();
rc.setRequestMethod("POST");
rc.addRequestProperty("Authorization", "Basic "+encoded);
rc.setDoOutput(true);

rc.connect();
OutputStreamWriter out = new OutputStreamWriter(
rc.getOutputStream());
out.write(serviceURL, 0, len);
out.flush();
System.out.println("Request sent, reading response ");
InputStreamReader read = new InputStreamReader(rc.getInputStream());
StringBuilder sb = new StringBuilder();
int ch = read.read();
while (ch != -1) {
sb.append((char) ch);
ch = read.read();
}
response = sb.toString();
System.out.println("Response:"+response);
read.close();
rc.disconnect();
} catch (Exception e) {
System.out.println(e.getMessage());
}

return response;

}

}


‐------------------
package com.adapter.rest;

import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;

import oracle.iam.platform.Platform;
import Thor.API.tcResultSet;
import Thor.API.Operations.tcITResourceInstanceOperationsIntf;

public class RestAdapter {

private static final Logger LOGGER = Logger.getLogger("RestAdapter");

public String pushUserLoginInSAP(String userLogin, String employeeNumber,
String itResource) {
LOGGER.log(Level.INFO,
"Entering pushUserLoginInSAP method::User Login: " + userLogin
+ "::employeeNumber:" + employeeNumber
+ "::itResource:" + itResource);
String response = "FAILED";
HashMap<String, String> itResMap = new HashMap<String, String>();
String serviceURL = "";
try {
itResMap = getITResourceValues(itResource);
LOGGER.log(Level.INFO,"IT ResourceMap:"+itResMap);
serviceURL = itResMap.get("WebService URL") + "/" + employeeNumber
+ "/" + userLogin;
LOGGER.log(Level.INFO,"Service URL:"+serviceURL);
Client restClient = Client.create();
WebResource webResource = restClient.resource(serviceURL);
ClientResponse resp = webResource
.accept("application/json")
.header("Authorization",
"Basic " + itResMap.get("Authorization Token"))
.get(ClientResponse.class);
if (resp.getStatus() != 200) {
LOGGER.log(Level.INFO,"Response Code:"+resp.getStatus());
LOGGER.log(Level.INFO,"Response:"+resp.getEntity(String.class));
response=resp.getStatus()+resp.getEntity(String.class);
}
else
{
LOGGER.log(Level.INFO,"Successfully updated employee number");
response="SUCCESS";
}

} catch (Exception e) {
//System.out.println(e.getMessage());
LOGGER.log(Level.SEVERE,"Exception occurred while invoking webservice:"+e.getMessage());
response=e.getMessage();
}
LOGGER.log(Level.INFO,"Exiting pushUserLoginInSAP method:"+response);
return response;

}

private HashMap<String, String> getITResourceValues(String itResource) {

LOGGER.log(Level.FINE, "Entering getITResourceValues");
tcITResourceInstanceOperationsIntf tcITResourceIntf = Platform
.getService(tcITResourceInstanceOperationsIntf.class);
HashMap<String, String> searchcriteria = new HashMap<String, String>();
HashMap<String, String> itResourceMap = new HashMap<String, String>();
searchcriteria.put("IT Resources.Name", itResource);
try {
tcResultSet resultSet = tcITResourceIntf
.findITResourceInstances(searchcriteria);
resultSet = tcITResourceIntf
.getITResourceInstanceParameters(resultSet
.getLongValue("IT Resources.Key"));

for (int i = 0; i < resultSet.getRowCount(); i++) {
resultSet.goToRow(i);

String name = resultSet
.getStringValue("IT Resources Type Parameter.Name");

String value = resultSet
.getStringValue("IT Resources Type Parameter Value.Value");
itResourceMap.put(name, value);
}

} catch (Exception e) {
LOGGER.log(
Level.SEVERE,
"Exception ocurred while fetching ITResource values"
+ e.getMessage());
}
LOGGER.log(Level.FINE, "Exiting getITResourceValues");
return itResourceMap;

}

}




‐--------------



import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Hashtable;

import javax.security.auth.login.LoginException;

import oracle.iam.identity.usermgmt.api.UserManager;
import oracle.iam.identity.usermgmt.vo.User;
import oracle.iam.platform.OIMClient;

public class UpdateUserOrg {
       public static void main(String[] args) throws IOException {
             OIMClient client = getConnection();
             UserManager mgr = null;
             BufferedReader br = null;
             try {
                    br = new BufferedReader(new FileReader("C:\\FilePath\\a.txt"));
                    mgr = client.getService(UserManager.class);
                    String userLogin = "";
                    HashSet<String> retAttr = new HashSet<String>();
                    while ((userLogin = br.readLine()) != null) {
                          System.out.println("Updating organization of:" + userLogin);
                          User user = mgr.getDetails(userLogin, retAttr, true);
                          if (user != null) {
                                 User us=new User(user.getEntityId());
                                 us.setOrganizationKey("24");//Put ACT_Key of the required org
                                 mgr.modify(us);
                                 System.out.println("Updated organization of:" + userLogin);
                          } else
                                 System.out.println(userLogin + " not found");
                    }
             }

             catch (Exception e) {
                    System.out.println(e.getMessage());
             } finally {
                    if (br != null)
                          br.close();
             }
       }

       public static OIMClient getConnection() {
             Hashtable<Object, Object> env = new Hashtable<Object, Object>();
             env.put(OIMClient.JAVA_NAMING_FACTORY_INITIAL, "weblogic.jndi.WLInitialContextFactory");
             env.put(OIMClient.JAVA_NAMING_PROVIDER_URL, "t3://Host:Port");
              System.setProperty("java.security.auth.login.config",
                    "authwl.conf");

             System.setProperty("OIM.AppServerType", "wls");
             System.setProperty("APPSERVER_TYPE", "wls");
             oracle.iam.platform.OIMClient oimClient = new oracle.iam.platform.OIMClient(env);

             try {
                    System.out.println("Fetching OIM connection");
                    oimClient.login("", "".toCharArray());

                    System.out.print("Successfully Connected with OIM ");
             } catch (LoginException e) {
                    System.out.print("Login Exception" + e);
             }

             return oimClient;

       }

}

