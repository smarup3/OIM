package com.oim.eventHandler.SendEmail;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;

import Thor.API.tcResultSet;
import Thor.API.Exceptions.tcAPIException;
import Thor.API.Exceptions.tcInvalidLookupException;
import Thor.API.Operations.tcLookupOperationsIntf;

import oracle.core.ojdl.logging.ODLLogger;
import oracle.iam.identity.exception.AccessDeniedException;
import oracle.iam.identity.exception.NoSuchUserException;
import oracle.iam.identity.exception.UserLookupException;
import oracle.iam.identity.usermgmt.api.UserManager;
import oracle.iam.identity.usermgmt.api.UserManagerConstants;
import oracle.iam.identity.usermgmt.vo.User;
import oracle.iam.notification.api.NotificationService;
import oracle.iam.notification.vo.NotificationEvent;
import oracle.iam.platform.Platform;
import oracle.iam.platform.kernel.spi.PostProcessHandler;
import oracle.iam.platform.kernel.vo.AbstractGenericOrchestration;
import oracle.iam.platform.kernel.vo.BulkEventResult;
import oracle.iam.platform.kernel.vo.BulkOrchestration;
import oracle.iam.platform.kernel.vo.EventResult;
import oracle.iam.platform.kernel.vo.Orchestration;

public class SendUserCreationEmail implements PostProcessHandler {
	private static final ODLLogger logger = ODLLogger
			.getODLLogger("SendUserCreationEmail");

	@Override
	public void initialize(HashMap<String, String> arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void compensate(long arg0, long arg1,
			AbstractGenericOrchestration arg2) {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean cancel(long arg0, long arg1,
			AbstractGenericOrchestration arg2) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public EventResult execute(long processId, long eventId,
			Orchestration orchestration) {
		logger.entering("Notification", "EventResult execute");
		try {
			logger.info("Entering  EventResult of NotifyUserIdToUser");
			logger.info("Process ID:" + processId);
			logger.info("Event ID:" + eventId);
			String oprType = orchestration.getOperation();
			logger.info("oprType:" + oprType);
			HashMap<String, Serializable> Params = orchestration
					.getParameters();
			logger.info("Param:" + Params);
			Set<String> KeySet = Params.keySet();
			logger.info("KeySet:" + KeySet);
			String usrLogin = null;
			String usrKey = null;
			HashMap<String, String> roleLookupMap = getLookupValues("Put the lookup name her");
			for (String key : KeySet) {
				logger.info("key:" + key);
				Serializable serializable = Params.get(key);
				if (key.equalsIgnoreCase("User Login")) {
					usrLogin = serializable.toString();
					logger.info("usrLogin ->" + usrLogin);
					HashSet<String> retAttrs = new HashSet<String>();
					retAttrs.add("Role");
					UserManager usrMgr = Platform.getService(UserManager.class);

					User user = usrMgr.getDetails(usrLogin, retAttrs, true);
					usrKey = user.getEntityId();

					if (roleLookupMap != null
							&& user.getAttribute("Role") != null
							&& roleLookupMap.get(((String) user
									.getAttribute("Role"))) != null) {
						String templateName = "Notify Manager";
						NotificationService notService = Platform
								.getService(NotificationService.class);
						NotificationEvent eventToSend = this
								.createNotificationEvent(templateName, usrKey);
						notService.notify(eventToSend);
					}

				}
			}

		} catch (Exception e) {
			logger.info("exception e in ExecuteEvent ->" + e.getMessage());
			e.printStackTrace();
		}
		logger.exiting("Notification", "ExecuteEvent");
		return new EventResult();
	}

	private NotificationEvent createNotificationEvent(String poTemplateName,
			String userKey) {
		logger.entering("Notification", "createNotificationEvent()");
		NotificationEvent event = null;
		try {
			event = new NotificationEvent();
			String[] receiverUserIds = getRecipientUserIds(userKey);
			event.setUserIds(receiverUserIds);
			event.setTemplateName(poTemplateName);
			event.setSender(null);
			logger.info("User ID: " + receiverUserIds.toString());
			logger.info("Template Name: " + poTemplateName);
			HashMap<String, Object> templateParams = new HashMap<String, Object>();
			templateParams.put("usr_key", userKey);
			event.setParams(templateParams);
			logger.exiting("Notification", "createNotificationEvent()");
		} catch (Exception e) {
			e.printStackTrace();
			logger.severe("Exception in createNotificationEvent()"
					+ e.getMessage());
		}
		return event;
	}

	private String[] getRecipientUserIds(String userKey)
			throws NoSuchUserException, UserLookupException,
			AccessDeniedException {
		UserManager usrMgr = Platform.getService(UserManager.class);
		User user = null;
		String userId = null;
		Set<String> userRetAttrs = new HashSet<String>();
		userRetAttrs
				.add(UserManagerConstants.AttributeName.MANAGER_KEY.getId());
		userRetAttrs.add(UserManagerConstants.AttributeName.USER_LOGIN.getId());
		User manager = null;
		String managerId = null;
		String managerKey = null;
		Set<String> managerRetAttrs = new HashSet<String>();
		managerRetAttrs.add(UserManagerConstants.AttributeName.USER_LOGIN
				.getId());
		user = usrMgr.getDetails(userKey, userRetAttrs, false);
		userId = user.getAttribute(
				UserManagerConstants.AttributeName.USER_LOGIN.getId())
				.toString();
		List<String> userIds = new ArrayList<String>();
		userIds.add(userId);
		if (user.getAttribute(UserManagerConstants.AttributeName.MANAGER_KEY
				.getId()) != null) {
			managerKey = user.getAttribute(
					UserManagerConstants.AttributeName.MANAGER_KEY.getId())
					.toString();
			manager = usrMgr.getDetails(managerKey, managerRetAttrs, false);
			managerId = manager.getAttribute(
					UserManagerConstants.AttributeName.USER_LOGIN.getId())
					.toString();
			userIds.add(managerId);
		}
		String[] recipientIDs = userIds.toArray(new String[0]);
		return recipientIDs;
	}

	@Override
	public BulkEventResult execute(long processID, long eventID,
			BulkOrchestration bulkOrchestration) {
		logger.entering("Notification", "Bulk User Creation");
		try {
			logger.info("Entering  BulkEventResult of NotifyUserIdToUser");
			logger.info("processID:" + processID);
			logger.info("eventID:" + eventID);
			String oprType = bulkOrchestration.getOperation();
			logger.info("oprType:" + oprType);
			HashMap<String, Serializable>[] bulkParams = bulkOrchestration
					.getBulkParameters();
			HashMap<String, String> roleLookupMap = getLookupValues("Put the lookup name her");
			for (HashMap<String, Serializable> bulkParam : bulkParams) {
				logger.info("bulkParam:" + bulkParam);
				Set<String> bulkKeySet = bulkParam.keySet();
				logger.info("bulkKeySet:" + bulkKeySet);
				String usrLogin = null;
				String usrKey = null;
				for (String key : bulkKeySet) {
					logger.info("key:" + key);
					Serializable serializable = bulkParam.get(key);
					if (key.equalsIgnoreCase("User Login")) {
						usrLogin = serializable.toString();
						logger.info("usrLogin:" + usrLogin);
						UserManager usrMgr = Platform
								.getService(UserManager.class);
						HashSet<String> retAttrs = new HashSet<String>();
						retAttrs.add("Role");
						User user = usrMgr.getDetails(usrLogin, retAttrs, true);
						usrKey = user.getEntityId();
						String uid = user.getId();
						logger.info("uid:" + uid);
						logger.info("usrKey:" + usrKey);
						String templateName = "Notify Manager";
						if (roleLookupMap != null
								&& user.getAttribute("Role") != null
								&& roleLookupMap.get(((String) user
										.getAttribute("Role"))) != null) {
							NotificationService notService = Platform
									.getService(NotificationService.class);
							NotificationEvent eventToSend = this
									.createNotificationEvent(templateName,
											usrKey);
							notService.notify(eventToSend);
						}

					}
				}
			}
		} catch (Exception e) {
			logger.info("exception e in BulkExecuteEvent ->" + e.getMessage());
			e.printStackTrace();
		}
		logger.exiting("Notification", "Bulk User Creation");
		return new BulkEventResult();
	}

	public HashMap<String, String> getLookupValues(String roleLookup)
			throws tcAPIException, tcInvalidLookupException {
		logger.log(Level.FINE, "Entering getLookupValues");
		tcLookupOperationsIntf lookupOps = Platform
				.getService(tcLookupOperationsIntf.class);
		tcResultSet result;
		HashMap<String, String> map = new HashMap<String, String>();
		try {
			result = lookupOps.getLookupValues(roleLookup);
			for (int i = 0; i < result.getRowCount(); i++) {
				result.goToRow(i);
				String code = result
						.getStringValue("Lookup Definition.Lookup Code Information.Code Key");
				String decode = result
						.getStringValue("Lookup Definition.Lookup Code Information.Decode");
				if (code != null && decode != null)
					map.put(code, decode);
			}

		} catch (Exception e) {
			logger.log(
					Level.SEVERE,
					"Exception ocurred while fetching Lookup Values:"
							+ e.getMessage());
		}
		logger.log(Level.FINE, "Exiting getLookupValues");
		return map;
	}

}
